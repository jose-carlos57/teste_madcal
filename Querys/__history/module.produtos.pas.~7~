unit module.produtos;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ExtCtrls,
  Vcl.Buttons,
  Vcl.StdCtrls,
  Vcl.CheckLst, Vcl.ComCtrls, Vcl.Mask, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet;


function inserirDadosProdutos(FDConnection: TFDConnection; const descricao : string; const unidadeMedida : double;var cd_status: Integer): Boolean;

implementation

function inserirDadosProdutos(FDConnection: TFDConnection; const descricao : string; const unidadeMedida : double  ;var cd_status: Integer): Boolean;
Var FDQuery: TFDQuery;
begin
FDQuery := TFDQuery.Create(nil);
  try
    FDQuery.Connection := FDConnection;
    FDQuery.SQL.Text := 'INSERT INTO produtos (descricao, unidade_medida,  cd_status) VALUES (:descricao, :unidade_medida, :cd_status)';

    // Define os parâmetros
    FDQuery.ParamByName('descricao').AsString := descricao;
    FDQuery.ParamByName('descricao').AsFloat := unidadeMedida;
    FDQuery.ParamByName('cd_status').AsInteger := cd_status;

    // Executa a query

    try
      FDQuery.ExecSQL;
      Result:= true;
    except
      ShowMessage('Erro ao inserir dados!')
    end;


  finally
    FDQuery.Free;
  end;
end;


end.
